package TestBase;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.google.common.base.Function;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import Common.Screenshot;

public class TestBase {

	public static Properties Repository;
	public File f;
	public FileInputStream FI;
	public static WebDriver driver;
	public String startTime;
	public static int indexSI = 1;
	public static ExtentReports extent;
	public static ExtentTest test;
	public static Actions action;

	public static Logger log = Logger.getLogger(TestBase.class);
	private static final long DEFAULT_WAIT_SECONDS = 60;
	private static String lastAction;
	public  List<WebElement> activeLinks;
	static {
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
		extent = new ExtentReports(System.getProperty("user.dir") + "/Reports/HtmlReports/Automaton Report" + ".html",
				true);
		// extent = new ExtentReports(System.getProperty("user.dir") +
		// "/Reports/HtmlReports/Automaton Report"+".html", false);

	}

	public void init() throws IOException {
		String log4jConfPath = "./src/main/resources/ConfigFiles/log4j.properties";
		PropertyConfigurator.configure(log4jConfPath);
		loadPropertiesFile();
		selectBrowser(Repository.getProperty("browser"));
		driver.get(Repository.getProperty("url"));
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	public void loadPropertiesFile() throws IOException {
		f = new File(System.getProperty("user.dir") + "//src//main//resources//ConfigFiles//config.properties");
		FI = new FileInputStream(f);
		Repository = new Properties();
		Repository.load(FI);
	}

	public void selectBrowser(String browser) {
		if (System.getProperty("os.name").contains("Window")) {
			if (browser.equalsIgnoreCase("firefox")) {
				// https://github.com/mozilla/geckodriver/releases
				System.out.println(System.getProperty("user.dir"));
				System.setProperty("webdriver.gecko.driver",
						System.getProperty("user.dir") + "/src/main/resources/Drivers/geckodriver.exe");
				driver = new FirefoxDriver();
			} else if (browser.equalsIgnoreCase("chrome")) {
				// https://chromedriver.storage.googleapis.com/index.html
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir") + "/src/main/resources/Drivers/chromedriver.exe");
				driver = new ChromeDriver();
			} else {
				System.setProperty("webdriver.IE.driver",
						System.getProperty("user.dir") + "/src/main/resources/Drivers/IEDriverServer.exe");
				System.setProperty("webdriver.IE.driver", System.getProperty("IEDriverPath"));
				driver = new InternetExplorerDriver();
			}
		} else if (System.getProperty("os.name").contains("Mac")) {
			System.out.println(System.getProperty("os.name"));
			if (browser.equalsIgnoreCase("firefox")) {
				System.out.println(System.getProperty("user.dir"));
				System.setProperty("webdriver.firefox.marionette",
						System.getProperty("user.dir") + "/drivers/geckodriver");
				driver = new FirefoxDriver();
			} else if (browser.equalsIgnoreCase("chrome")) {
				System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "/drivers/chromedriver");
				driver = new ChromeDriver();
			} else {
				System.setProperty("webdriver.IE.driver",
						System.getProperty("user.dir") + "/src/main/resources/Drivers/IEDriverServer.exe");
				driver = new InternetExplorerDriver();
			}
		}
	}

	public void expliciteWait(WebElement element, int timeToWaitInSec) {
		WebDriverWait wait = new WebDriverWait(driver, timeToWaitInSec);
		wait.until(ExpectedConditions.visibilityOf(element));
	}

	public void waitForPageToLoad(long timeOutInSeconds) {
		ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {
			public Boolean apply(WebDriver driver) {
				return ((JavascriptExecutor) driver).executeScript("return document.readyState").equals("complete");
			}
		};
		try {
			System.out.println("Waiting for page to load...");
			WebDriverWait wait = new WebDriverWait(driver, timeOutInSeconds);
			wait.until(expectation);
		} catch (Throwable error) {
			System.out.println(
					"Timeout waiting for Page Load Request to complete after " + timeOutInSeconds + " seconds");
			Assert.assertFalse(true, "Timeout waiting for Page Load Request to complete.");
		}
	}

	public void clickWhenReady(By locator, int timeout) {
		WebElement element = null;
		WebDriverWait wait = new WebDriverWait(driver, timeout);
		element = wait.until(ExpectedConditions.elementToBeClickable(locator));
		element.click();
	}

	public WebElement fluentWait(final WebElement webElement, int timeinsec) {
		FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(timeinsec, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS).ignoring(NoSuchElementException.class);
		WebElement element = wait.until(new Function<WebDriver, WebElement>() {
			public WebElement apply(WebDriver driver) {
				return webElement;
			}
		});

		return element;
	};

	public WebElement getWhenVisible(By locator, int timeout) {
		WebElement element = null;
		WebDriverWait wait = new WebDriverWait(driver, timeout);
		element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
		return element;
	}

	public void waitFor(int sec) throws InterruptedException {
		Thread.sleep(sec * 1000);
	}

	public void getScreenShot(String fileName) throws IOException {
		File outputFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(outputFile,
				new File(System.getProperty("user.dir") + "//Reports//screenshots//" + fileName + ".jpg"));
	}

	public static String now(String format) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat fm = new SimpleDateFormat();
		return fm.format(cal.getTime());
	}

	public static void updateResult(int indexSI, String testCaseName, String testCaseStatus, String scriptName)
			throws IOException {
		String startDateTime = new SimpleDateFormat("MM-dd-yyyy_HH-ss").format(new GregorianCalendar().getTime());

		String userDirector = System.getProperty("user.dir");

		String resultFile = userDirector + "\\Reports\\HtmlReports\\TestHtmlReport.html";

		File file = new File(resultFile);
		System.out.println(file.exists());

		if (!file.exists()) {
			FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write("<html>" + "\n");
			bw.write("<head><title>" + "Test execution report" + "</title>" + "\n");
			bw.write("</head>" + "\n");
			bw.write("<body>");
			bw.write("<font face='Tahoma'size='2'>" + "\n");
			bw.write("<u><h1 align='center'>" + "Test execution report" + "</h1></u>" + "\n");
			bw.flush();
			bw.close();
		}
		BufferedWriter bw1 = new BufferedWriter(new FileWriter(file, true));
		if (indexSI == 1) {
			bw1.write("<table align='center' border='0' width='70%' height='10'>");
			bw1.write("<tr><td width='70%' </td></tr>");
			bw1.write("<table align='center' border='1' width='70%' height='47'>");
			bw1.write("<tr>");
			bw1.write(
					"<td colspan='2' align='center'><b><font color='#000000' face='Tahoma' size='2'>ScriptName :&nbsp;&nbsp;&nbsp;</font><font color='#0000FF'' face='Tahoma' size='2'>"
							+ scriptName + " </font></b></td>");
			bw1.write(
					"<td colspan='1' align='left'><b><font color='#000000' face='Tahoma' size='1'>Start Time :&nbsp;</font></b><font color='#0000FF'' face='Tahoma' size='1'>"
							+ startDateTime + " </font></td>");
			bw1.write("</tr>");
			bw1.write("</tr>");
			bw1.write(
					"<td  bgcolor='#CCCCFF' align='center'><b><font color='#000000' face='Tahoma' size='2'>S.No</font></b></td>");
			bw1.write(
					"<td  bgcolor='#CCCCFF' align='left'><b><font color='#000000' face='Tahoma' size='2'>Test case ID : Test case Description </font></b></td>");

			bw1.write(
					"<td  bgcolor='#CCCCFF' align='center'><b><font color='#000000' face='Tahoma' size='2'>Result </font></b></td>");
			bw1.write("</tr>");
		}
		bw1.write("<tr>" + "\n");
		bw1.write("<td bgcolor='#FFFFDC'align='Center'><font color='#000000' face='Tahoma' size='2'>" + indexSI
				+ "</font></td>" + "\n");
		bw1.write("<td  bgcolor='#FFFFDC' valign='middle' align='left'><b><font color='#000000' face='Tahoma' size='2'>"
				+ testCaseName + "</font></b></td>" + "\n");
		if (testCaseStatus == "Pass") {
			bw1.write(
					"<td  bgcolor='#FFFFDC' valign='middle' align='center'><b><font color='Green' face='Tahoma' size='2'>"
							+ testCaseStatus + "</font></b></td>" + "\n");
		} else {
			bw1.write(
					"<td  bgcolor='#FFFFDC' valign='middle' align='center'><b><font color='red' face='Tahoma' size='2'>"
							+ testCaseStatus + "</font></b></td>" + "\n");
		}
		bw1.write("</tr>" + "\n");
		bw1.write("</body>" + "\n");
		bw1.write("</html>");
		bw1.flush();
		bw1.close();

	}

	public void getresult(ITestResult result) throws IOException {
		if (result.getStatus() == ITestResult.SUCCESS) {
			updateResult(indexSI++, getClass().getName(), "Pass", "Test1");
			test.log(LogStatus.PASS, result.getName() + " test is pass");
		} else if (result.getStatus() == ITestResult.SKIP) {
			updateResult(indexSI++, getClass().getName(), "Skip", "Test1");
			test.log(LogStatus.SKIP,
					result.getName() + " test is skipped and skip reason is:-" + result.getThrowable());
		} else if (result.getStatus() == ITestResult.FAILURE) {
			updateResult(indexSI++, getClass().getName(), "Fail", "Test1");
			test.log(LogStatus.ERROR, result.getName() + " test is failed" + result.getThrowable());
			String screen = Screenshot.capture(driver, getClass().getName());
			test.log(LogStatus.FAIL, test.addBase64ScreenShot("data:image/png;base64," + screen));

		} else if (result.getStatus() == ITestResult.STARTED) {
			test.log(LogStatus.INFO, result.getName() + " test is started");
		}
	}

	@AfterMethod()
	public void afterMethod(ITestResult result) throws IOException {
		getresult(result);
	}

	@BeforeMethod()
	public void beforeMethod(Method result) {
		test = extent.startTest(result.getName());
		test.log(LogStatus.INFO, result.getName() + " test Started");
	}

	@AfterClass(alwaysRun = true)
	public void endTest() {
		closeBrowser();
	}

	public void closeBrowser() {
		extent.endTest(test);
		extent.flush();
		driver.quit();
	}

	public String captureScreen(String fileName) {
		if (fileName == "") {
			fileName = "blank";
		}
		File destFile = null;
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");

		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

		try {
			String reportDirectory = new File(System.getProperty("user.dir")).getAbsolutePath()
					+ "/src/main/java/com/test/automation/uiAutomation/screenshot/";
			destFile = new File(
					(String) reportDirectory + fileName + "_" + formater.format(calendar.getTime()) + ".png");
			FileUtils.copyFile(scrFile, destFile);
			// This will help us to link the screen shot in testNG report
			Reporter.log("<a href='" + destFile.getAbsolutePath() + "'> <img src='" + destFile.getAbsolutePath()
					+ "' height='100' width='100'/> </a>");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return destFile.toString();
	}

	public static WebDriver getdriver() {
		return driver;

	}
	/*
	 * //========================================= keywords
	 * ===========================================
	 */

	// private static Map<String, WebDriver> drivers = new HashMap<>();

	public static WebElement waitForClickable(By locator) {
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.ignoring(ElementNotVisibleException.class);
		wait.ignoring(WebDriverException.class);
		return wait.until(ExpectedConditions.elementToBeClickable(locator));
	}

	public static boolean click(By locator) {
		WebElement elm = waitForClickable(locator);
		if (elm == null) {
			return false;
		} else {
			elm.click();
			log.info("Click: " + locator.toString());
			return true;
		}
	}

	public static WebElement waitForVisibile(By locator) {
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.ignoring(ElementNotVisibleException.class);
		return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
	}

	public static boolean sendkeys(By locator, String data) {
		WebElement elm = waitForVisibile(locator);
		if (elm == null) {
			return false;
		} else {
			elm.sendKeys(data);
			log.info("Input Text: " + data + " - " + locator.toString());
			return true;
		}
	}

	public static void selectVisibleText(By locator, String visibleText) {
		System.out.println(locator);

		WebElement elm = waitForVisibile(locator);
		Select se = new Select(elm);
		System.out.println("afterselect");

		se.selectByVisibleText(visibleText);
		log.info("Select visible text in the dropdown : " + locator.toString());
	}

	public static void mouseHover(By locator) {
		WebElement elm = waitForVisibile(locator);
		// WebElement hoverElement = driver.findElement(elm);
		action = new Actions(driver);
		action.moveToElement(elm);
		// action.click().build().perform();
		log.info("Hover the element : " + locator.toString());
	}

	public static String getElementText(By locator) {
		TestBase.lastAction = "Get Element text: " + locator.toString();
		log.info(TestBase.lastAction);
		WebElement elm = waitForClickable(locator);
		return elm.getText().trim();
	}

	public static String getLabelText(By locator) {
		TestBase.lastAction = "Get Element text: " + locator.toString();
		log.info(TestBase.lastAction);
		WebElement elm = waitForVisibile(locator);
		return elm.getText().trim();
	}

	public static String getAttributeValue(By locator) {
		TestBase.lastAction = "Get Element text: " + locator.toString();
		log.info(TestBase.lastAction);
		WebElement elm = waitForVisibile(locator);
		return elm.getAttribute("name").trim();
	}

	public static void frameHandling(By locater, String frameName) {
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.ignoring(ElementNotVisibleException.class);
		wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(frameName));
	}

	public static void actionsclick(By locator) {
		WebElement elm = waitForVisibile(locator);
		// WebElement hoverElement = driver.findElement(elm);
		action = new Actions(driver);
		action.moveToElement(elm);
		action.click().build().perform();
		log.info("Hover the element : " + locator.toString());
	}

	public static String webtableVerification(String xpath, String xpath1, String xpath2, String xpath3,
			String breakCondtionText) {
		String text = "";

		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.until(ExpectedConditions.invisibilityOfAllElements());
		List<WebElement> webtable = driver.findElements(By.xpath(xpath));
		System.out.println(webtable.size());
		for (int i = 1; i <= webtable.size(); i++) {
			String finalXpath = xpath1 + i + xpath2 + xpath3;
			text = driver.findElement(By.xpath(finalXpath)).getText();
			if (text.equalsIgnoreCase(breakCondtionText)) {
				log.info("inside if");
				break;
			} else {
				log.info("name not exist in table");
			}
		}
		return text;
	}

	public void autosearch(By locater, String keyToSearch) throws InterruptedException {
		WebElement elm = waitForVisibile(locater);
		WebElement elm2 =driver.findElement(locater);
		elm2.click();
		Actions a =new Actions(driver);
		a.sendKeys(keyToSearch).build().perform();
		Thread.sleep(2000);
		a.sendKeys(Keys.DOWN).build().perform();
		Thread.sleep(2000);
		a.sendKeys(Keys.ENTER).build().perform();
	
		log.info("Input Text: " + keyToSearch + " - " + locater.toString());
	}

	public boolean isdispalyed(By locater) {
		WebElement ele = locater.findElement(driver);
		ele.isDisplayed();
		return true;
	}

	public static void bootStrabDropDownValue(By locatorDropdownbox, By locaterRow, String visibleText, String idvalue)
			throws InterruptedException {
		log.info("bootStrabDropDownValue method is on duty");
		List<WebElement> ele = locaterRow.findElements(driver);
		WebElement dropdownTextBox = locatorDropdownbox.findElement(driver);
		log.info("webelement list size is" + ele.size());
		Actions a = new Actions(driver);
		a.click(dropdownTextBox).build().perform();
		for (int i = 1; i <= ele.size(); i++) {
			String text = driver.findElement(By.xpath("//ul[@id='" + idvalue + "']/li[" + i + "]")).getText();
			if (text.equalsIgnoreCase(visibleText)) {
				log.info("condtion is satisfied and control is inside if block");
				a.sendKeys(Keys.DOWN).build().perform();
				a.sendKeys(Keys.ENTER).build().perform();
				break;
			}
			a.sendKeys(Keys.DOWN).build().perform();
		}
	}

	public static void WebTableSelectCheckBox(By tableLocator, String breakCondtionText) {
		log.info("WebTableSelectCheckBox method is on duty");
		String text = "";
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.until(ExpectedConditions.invisibilityOfAllElements());
		List<WebElement> webtable = tableLocator.findElements(driver);
		log.info("WebTableSelectCheckBox table size is" + webtable.size());
		for (int i = 1; i <= webtable.size(); i++) {
			// String finalXpath = xpath1 + i + xpath2 + xpath3;
			text = driver
					.findElement(
							By.xpath("//*[@id='ContentPlaceHolder1_gvBookedTransactions']/tbody/tr[" + i + "]/td[2]"))
					.getText();
			if (text.equalsIgnoreCase(breakCondtionText)) {
				log.info("codtion is satisfied and control is inside if block");
				driver.findElement(
						By.xpath("//*[@id='ContentPlaceHolder1_gvBookedTransactions']/tbody/tr[" + i + "]/td[1]/span"))
						.click();
			}
		}
	}

	public static void pendingApprovalsWebTableCheckBox(By tableLocator, String custmerName) {
		log.info("pendingApprovalsWebTableCheckBox method is on duty");
		String text = "";
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.until(ExpectedConditions.invisibilityOfAllElements());
		List<WebElement> webtable = tableLocator.findElements(driver);
		log.info("pendingApprovals table size is" + webtable.size());
		for (int i = 1; i <= webtable.size(); i++) {
			try {
				text = driver.findElement(By.xpath("(//div[@class='row'])[2]/div/table/tbody/tr[" + i + "]/td[4]"))
						.getText();
				log.info("custmer from table is--- " + text);
			} catch (Exception e) {
				log.info("custmer is not present in table ");
			}
			if (text.equalsIgnoreCase(custmerName)) {
				log.info("codtion is satisfied and control is inside if block");
				driver.findElement(By.xpath("(//div[@class='row'])[2]/div/table/tbody/tr[" + i + "]/td[1]/span"))
						.click();
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				break;
			}
		}
	}

	public static double netBankingAmountcalculator(double netAmount) {
		double internetHandling = 20;
		double gst = (internetHandling * 18) / 100;
		double amoutwithgst = internetHandling + gst;
		System.out.println("gst is----" + gst);
		System.out.println(amoutwithgst);
		double Total = netAmount + amoutwithgst;
		return Total;
	}

	// Sample Method
	public static String webtableVerificationTest(String xpath, String textXpath, String breakCondtionText) {
		log.info("webtableVerificationTest is started");

		String text = "";
		String xpathUpToRow = textXpath.substring(0, textXpath.lastIndexOf("/") - 1);
		String xpathafterRow = textXpath.substring(textXpath.lastIndexOf("/") - 1);
		WebDriverWait wait = new WebDriverWait(getdriver(), DEFAULT_WAIT_SECONDS);
		wait.until(ExpectedConditions.visibilityOfAllElements());
		List<WebElement> webtable = driver.findElements(By.xpath(xpath));
		System.out.println(webtable.size());
		for (int i = 1; i <= webtable.size(); i++) {
			String finalXpath = xpathUpToRow + i + xpathafterRow;
			text = driver.findElement(By.xpath(finalXpath)).getText();
			if (text.equalsIgnoreCase(breakCondtionText)) {
				log.info("inside if");
				break;
			} else {
				log.info("name not exist in table");
			}
		}
		return text;
	}

	public void handlingWindow() {
		String child = null;
		Set<String> handler = driver.getWindowHandles();
		Iterator<String> iter = handler.iterator();
		log.info("total windows are--->" + handler.size());
		/*
		 * while(iter.hasNext()){ child=driver.getWindowHandle(); break; }
		 * log.info("loanprocess child window is--->"+child);
		 * driver.switchTo().window(child);
		 */
		String parentWindow = iter.next();
		log.info("loanprocess parentWindow  is--->" + parentWindow);
		String childWindow = iter.next();
		log.info("loanprocess child window is--->" + childWindow);
		driver.switchTo().window(childWindow);
		String tilte = driver.getTitle();
		log.info("loanprocess child windowtitle is--->" + tilte);
	}

	public List<WebElement> activeLinksAndImAGES(By locaterLinks, By locaterimages) {
	     activeLinks = new ArrayList<WebElement>();
		List<WebElement> allLinks = new ArrayList(driver.findElements(locaterLinks));
		allLinks.addAll(driver.findElements(locaterimages));
		log.info("all links and images count is"+ allLinks.size());
		for (int i = 0; i < allLinks.size(); i++) {
			if (allLinks.get(i).getAttribute("href") != null
					&& !allLinks.get(i).getAttribute("href").contains("javascript")) {
				//log.info("inside if");
				activeLinks.add(allLinks.get(i));
				//log.info("activelinks are------>"+activeLinks.get(i));
			}
		}
		log.info("activelinks size is__>"+activeLinks.size());
		return activeLinks;
	
	}
}